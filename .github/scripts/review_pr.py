#!/usr/bin/env python3
import os
import subprocess
import sys
import openai
from pathlib import Path
import tempfile
import shutil

# Set OpenAI API key from environment
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise SystemExit("OPENAI_API_KEY environment variable is not set. Please provide your own OpenAI API key.")

def run_linter(file_path):
    """Run pylint and flake8 on a file and return issues."""
    issues = []

    # Run pylint
    try:
        pylint_result = subprocess.run(['pylint', file_path, '--output-format=text'], capture_output=True, text=True, cwd=os.getcwd())
        if pylint_result.returncode != 0:
            issues.append(f"Pylint issues in {file_path}:\n{pylint_result.stdout}\n{pylint_result.stderr}")
    except Exception as e:
        issues.append(f"Error running pylint on {file_path}: {e}")

    # Run flake8
    try:
        flake8_result = subprocess.run(['flake8', file_path], capture_output=True, text=True, cwd=os.getcwd())
        if flake8_result.returncode != 0:
            issues.append(f"Flake8 issues in {file_path}:\n{flake8_result.stdout}\n{flake8_result.stderr}")
    except Exception as e:
        issues.append(f"Error running flake8 on {file_path}: {e}")

    return issues

def get_ai_fix(code, issues):
    """Use OpenAI to generate a fix for the code based on linter issues."""
    prompt = f"""
You are a code review assistant. The following Python code has linter issues:

Code:
{code}

Issues:
{issues}

Please provide the corrected code that fixes these issues. Return only the corrected code, no explanations.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000,
            temperature=0.1
        )
        fixed_code = response.choices[0].message.content.strip()
        return fixed_code
    except Exception as e:
        print(f"Error getting AI fix: {e}")
        return None

def apply_fix(file_path, fixed_code):
    """Apply the AI-generated fix to the file."""
    try:
        with open(file_path, 'w') as f:
            f.write(fixed_code)
        print(f"Applied fix to {file_path}")
        return True
    except Exception as e:
        print(f"Error applying fix to {file_path}: {e}")
        return False

def create_branch_and_commit(files_to_commit, branch_name="ai-code-fixes"):
    """Create a new branch, add files, commit, and push."""
    try:
        # Create new branch
        subprocess.run(['git', 'checkout', '-b', branch_name], check=True, cwd=os.getcwd())

        # Add files
        for file in files_to_commit:
            subprocess.run(['git', 'add', file], check=True, cwd=os.getcwd())

        # Commit
        subprocess.run(['git', 'commit', '-m', 'AI-generated code fixes'], check=True, cwd=os.getcwd())

        # Push
        subprocess.run(['git', 'push', '-u', 'origin', branch_name], check=True, cwd=os.getcwd())

        print(f"Created branch '{branch_name}' and pushed changes.")
        return branch_name
    except subprocess.CalledProcessError as e:
        print(f"Error in git operations: {e}")
        return None

def create_pr(branch_name, title="AI Code Fixes", body="Automated code fixes generated by AI based on linter issues."):
    """Create a pull request using GitHub CLI."""
    try:
        # Check if gh is installed
        subprocess.run(['gh', '--version'], check=True, capture_output=True)

        # Create PR
        result = subprocess.run(['gh', 'pr', 'create', '--title', title, '--body', body, '--head', branch_name], capture_output=True, text=True, cwd=os.getcwd())
        if result.returncode == 0:
            print(f"Pull request created: {result.stdout.strip()}")
            return True
        else:
            print(f"Error creating PR: {result.stderr}")
            return False
    except subprocess.CalledProcessError as e:
        print(f"GitHub CLI not installed or not authenticated. Please install gh and run 'gh auth login'. Error: {e}")
        return False

def main():
    # Find all Python files in the current directory
    python_files = list(Path('.').rglob('*.py'))

    if not python_files:
        print("No Python files found in the current directory.")
        return

    files_with_issues = []
    fixed_files = []

    for file_path in python_files:
        print(f"Checking {file_path}...")
        issues = run_linter(str(file_path))
        if issues:
            files_with_issues.append((file_path, issues))
            print(f"Found {len(issues)} issue(s) in {file_path}")

            # Read the code
            try:
                with open(file_path, 'r') as f:
                    code = f.read()
            except Exception as e:
                print(f"Error reading {file_path}: {e}")
                continue

            # Get AI fix
            all_issues = '\n'.join(issues)
            fixed_code = get_ai_fix(code, all_issues)
            if fixed_code:
                # Apply fix
                if apply_fix(file_path, fixed_code):
                    fixed_files.append(str(file_path))
                else:
                    print(f"Failed to apply fix to {file_path}")
            else:
                print(f"Failed to get AI fix for {file_path}")
        else:
            print(f"No issues found in {file_path}")

    if fixed_files:
        print(f"\nFixed {len(fixed_files)} file(s): {', '.join(fixed_files)}")

        # Create branch and commit
        branch_name = create_branch_and_commit(fixed_files)
        if branch_name:
            # Create PR
            create_pr(branch_name)
        else:
            print("Failed to create branch and commit changes.")
    else:
        print("No files were fixed.")

if __name__ == '__main__':
    main()
